version: '3.8'

services:
  # NestJS Application - Production
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nestjs-app-prod
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "3000:3000"
    networks:
      - nestjs-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL - Main database for messages, users, kanban tasks
  postgres:
    image: postgres:15
    container_name: nestjs-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nestjs-network

  # Redis - Caching and session management
  redis:
    image: redis:7-alpine
    container_name: nestjs-redis-prod
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - nestjs-network

volumes:
  postgres_data:
  redis_data:

networks:
  nestjs-network:
    driver: bridge