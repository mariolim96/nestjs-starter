name: 🏷️ Auto Label

on:
  pull_request:
    types: [opened, edited, synchronize]
  issues:
    types: [opened, edited]

jobs:
  auto-label:
    name: 🏷️ Auto Label PRs & Issues
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Auto-label based on files
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const labels = new Set();

            // Analyze changed files
            files.forEach(file => {
              const filename = file.filename.toLowerCase();
              
              // Backend changes
              if (filename.includes('.ts') && !filename.includes('.spec.') && !filename.includes('test')) {
                labels.add('backend');
              }
              
              // Test changes
              if (filename.includes('.spec.') || filename.includes('test/') || filename.includes('.test.')) {
                labels.add('tests');
              }
              
              // Documentation changes
              if (filename.includes('.md') || filename.includes('docs/')) {
                labels.add('documentation');
              }
              
              // Docker/DevOps changes
              if (filename.includes('docker') || filename.includes('.yml') || filename.includes('.yaml')) {
                labels.add('devops');
              }
              
              // Database changes
              if (filename.includes('schema') || filename.includes('migration') || filename.includes('drizzle')) {
                labels.add('database');
              }
              
              // Security changes
              if (filename.includes('auth') || filename.includes('security') || filename.includes('jwt')) {
                labels.add('security');
              }
              
              // API changes
              if (filename.includes('controller') || filename.includes('dto') || filename.includes('.service.')) {
                labels.add('api');
              }
              
              // Config changes
              if (filename.includes('config') || filename.includes('.config.') || filename.includes('package.json')) {
                labels.add('configuration');
              }
            });

            // Add breaking change label if title indicates
            const title = context.payload.pull_request.title.toLowerCase();
            if (title.includes('breaking') || title.includes('!:')) {
              labels.add('breaking-change');
            }

            // Add bug fix label
            if (title.includes('fix') || title.includes('bug')) {
              labels.add('bug');
            }

            // Add feature label
            if (title.includes('feat') || title.includes('feature') || title.includes('add')) {
              labels.add('enhancement');
            }

            // Add chore label
            if (title.includes('chore') || title.includes('deps') || title.includes('dependency')) {
              labels.add('chore');
            }

            // Apply labels
            if (labels.size > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: Array.from(labels)
              });
            }

      - name: 🏷️ Auto-label issues
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue.title.toLowerCase();
            const body = context.payload.issue.body?.toLowerCase() || '';
            const labels = [];

            // Bug reports
            if (title.includes('bug') || title.includes('error') || title.includes('issue') ||
                body.includes('error') || body.includes('bug') || body.includes('broken')) {
              labels.push('bug');
            }

            // Feature requests
            if (title.includes('feature') || title.includes('enhancement') || title.includes('request') ||
                body.includes('feature') || body.includes('enhancement')) {
              labels.push('enhancement');
            }

            // Questions
            if (title.includes('question') || title.includes('how to') || title.includes('help') ||
                body.includes('question') || body.includes('how to')) {
              labels.push('question');
            }

            // Documentation
            if (title.includes('docs') || title.includes('documentation') ||
                body.includes('documentation') || body.includes('readme')) {
              labels.push('documentation');
            }

            // Security
            if (title.includes('security') || title.includes('vulnerability') ||
                body.includes('security') || body.includes('vulnerability')) {
              labels.push('security');
            }

            // Performance
            if (title.includes('performance') || title.includes('slow') || title.includes('optimization') ||
                body.includes('performance') || body.includes('slow')) {
              labels.push('performance');
            }

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }