name: 🚀 Deploy

on:
  workflow_run:
    workflows: ["🐳 Build Docker Image", "🔒 Container Security Scan"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      image:
        description: 'Docker image to deploy (leave empty for latest)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    if: |
      (github.event.workflow_run.conclusion == 'success' && 
       (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: 
      name: staging
      url: https://staging.yourapp.com
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Determine image to deploy
        id: image
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.image }}" ]; then
            echo "image=${{ github.event.inputs.image }}" >> $GITHUB_OUTPUT
          else
            echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying ${{ steps.image.outputs.image }} to staging..."
          # Add your staging deployment logic here
          # Examples:
          # - kubectl apply -f k8s/staging/
          # - docker-compose -f docker-compose.staging.yml up -d
          # - ansible-playbook deploy-staging.yml
          # - aws ecs update-service --cluster staging --service nestjs-app --force-new-deployment
          echo "✅ Staging deployment completed"

      - name: 🧪 Run smoke tests
        run: |
          echo "🧪 Running smoke tests against staging..."
          # Add smoke tests here
          # curl -f https://staging.yourapp.com/health || exit 1
          # npm run test:smoke:staging
          echo "✅ Smoke tests passed"

      - name: 📊 Deployment summary
        run: |
          echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ steps.image.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://staging.yourapp.com" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Deployed Successfully" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: |
      startsWith(github.ref, 'refs/tags/v') || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: 
      name: production
      url: https://yourapp.com
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Determine image to deploy
        id: image
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.image }}" ]; then
            echo "image=${{ github.event.inputs.image }}" >> $GITHUB_OUTPUT
          else
            echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: 🌟 Deploy to production
        run: |
          echo "🌟 Deploying ${{ steps.image.outputs.image }} to production..."
          # Add your production deployment logic here
          echo "✅ Production deployment completed"

      - name: 🧪 Run production smoke tests
        run: |
          echo "🧪 Running smoke tests against production..."
          # Add production smoke tests here
          echo "✅ Production smoke tests passed"

      - name: 📢 Notify deployment
        run: |
          echo "📢 Notifying team about production deployment..."
          # Add notification logic (Slack, email, etc.)

      - name: 📊 Deployment summary
        run: |
          echo "## 🌟 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ steps.image.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://yourapp.com" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Deployed Successfully" >> $GITHUB_STEP_SUMMARY