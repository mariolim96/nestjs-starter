name: 🐳 Docker Updates

on:
  schedule:
    # Run every Sunday at 10 AM UTC
    - cron: '0 10 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  docker-updates:
    name: 🐳 Check Docker Base Images
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check current Docker versions
        id: current-versions
        run: |
          # Extract Node.js version from Dockerfile
          NODE_VERSION=$(grep "FROM node:" Dockerfile | head -1 | sed 's/.*node:\([0-9]*\).*/\1/')
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          
          # Extract PostgreSQL version from docker-compose
          PG_VERSION=$(grep "postgres:" docker-compose.yml | sed 's/.*postgres:\([0-9]*\).*/\1/')
          echo "postgres_version=$PG_VERSION" >> $GITHUB_OUTPUT
          
          # Extract Redis version from docker-compose
          REDIS_VERSION=$(grep "redis:" docker-compose.yml | sed 's/.*redis:\([0-9]*\).*/\1/')
          echo "redis_version=$REDIS_VERSION" >> $GITHUB_OUTPUT
          
          echo "Current versions detected:"
          echo "- Node.js: $NODE_VERSION"
          echo "- PostgreSQL: $PG_VERSION"
          echo "- Redis: $REDIS_VERSION"

      - name: 🔍 Check for updates
        id: check-updates
        run: |
          echo "## 🐳 Docker Base Image Update Check" > docker-update-report.md
          echo "" >> docker-update-report.md
          echo "This is a scheduled check for updates to our Docker base images." >> docker-update-report.md
          echo "" >> docker-update-report.md
          
          echo "### Current Versions:" >> docker-update-report.md
          echo "- **Node.js:** ${{ steps.current-versions.outputs.node_version }}" >> docker-update-report.md
          echo "- **PostgreSQL:** ${{ steps.current-versions.outputs.postgres_version }}" >> docker-update-report.md
          echo "- **Redis:** ${{ steps.current-versions.outputs.redis_version }}" >> docker-update-report.md
          echo "" >> docker-update-report.md
          
          echo "### Manual Update Checklist:" >> docker-update-report.md
          echo "- [ ] Check [Node.js releases](https://nodejs.org/en/about/releases/) for newer LTS versions" >> docker-update-report.md
          echo "- [ ] Check [PostgreSQL releases](https://www.postgresql.org/support/versioning/) for updates" >> docker-update-report.md
          echo "- [ ] Check [Redis releases](https://redis.io/download) for updates" >> docker-update-report.md
          echo "- [ ] Update Dockerfile and docker-compose files if needed" >> docker-update-report.md
          echo "- [ ] Test compatibility with existing dependencies" >> docker-update-report.md
          echo "- [ ] Review security advisories for all base images" >> docker-update-report.md
          echo "" >> docker-update-report.md
          
          echo "### Security Notes:" >> docker-update-report.md
          echo "- Always prefer LTS versions for production" >> docker-update-report.md
          echo "- Test thoroughly before merging updates" >> docker-update-report.md
          echo "- Consider breaking changes in major version updates" >> docker-update-report.md
          echo "" >> docker-update-report.md
          
          echo "### Useful Commands:" >> docker-update-report.md
          echo '```bash' >> docker-update-report.md
          echo '# Check current Node.js LTS version' >> docker-update-report.md
          echo 'curl -s https://nodejs.org/dist/index.json | jq ".[0]"' >> docker-update-report.md
          echo '' >> docker-update-report.md
          echo '# Test new Docker image locally' >> docker-update-report.md
          echo 'docker build --target development -t test-image .' >> docker-update-report.md
          echo 'docker run --rm test-image node --version' >> docker-update-report.md
          echo '```' >> docker-update-report.md

      - name: 📝 Create or update issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const issueBody = fs.readFileSync('docker-update-report.md', 'utf8');
            
            // Check if issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'docker-updates',
              state: 'open'
            });
            
            if (existingIssues.data.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🐳 Weekly Docker base image update check',
                body: issueBody,
                labels: ['docker-updates', 'maintenance', 'enhancement']
              });
            } else {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssues.data[0].number,
                body: issueBody
              });
              
              // Add comment about the update
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssues.data[0].number,
                body: `🔄 Updated weekly Docker image check - ${new Date().toISOString()}`
              });
            }

      - name: 📊 Update summary
        run: |
          echo "## 🐳 Docker Update Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Current Node.js:** ${{ steps.current-versions.outputs.node_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current PostgreSQL:** ${{ steps.current-versions.outputs.postgres_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Redis:** ${{ steps.current-versions.outputs.redis_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** Issue created/updated for manual review" >> $GITHUB_STEP_SUMMARY