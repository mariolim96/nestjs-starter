name: 🔒 Security Monitoring

on:
  schedule:
    # Run security check daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  security-events: write

jobs:
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔒 Run security audit
        id: audit
        run: |
          pnpm audit --json > audit-results.json || true
          
          # Check if there are any vulnerabilities
          if [ -s audit-results.json ]; then
            VULNERABILITIES=$(cat audit-results.json | jq '.advisories | length')
            echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
            echo "Found $VULNERABILITIES vulnerabilities"
          else
            echo "vulnerabilities=0" >> $GITHUB_OUTPUT
            echo "No vulnerabilities found"
          fi

      - name: 📁 Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30

      - name: 🚨 Create security issue
        if: steps.audit.outputs.vulnerabilities != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const auditResults = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
            
            let issueBody = '## 🚨 Security Vulnerabilities Detected\n\n';
            issueBody += `Found ${auditResults.advisories?.length || 0} security vulnerabilities in dependencies.\n\n`;
            
            if (auditResults.advisories) {
              issueBody += '### Vulnerabilities:\n';
              Object.values(auditResults.advisories).forEach(advisory => {
                issueBody += `- **${advisory.title}** (${advisory.severity})\n`;
                issueBody += `  - Package: ${advisory.module_name}\n`;
                issueBody += `  - Vulnerable versions: ${advisory.vulnerable_versions}\n`;
                issueBody += `  - Recommendation: ${advisory.recommendation}\n\n`;
              });
            }
            
            issueBody += '\n### Actions Required:\n';
            issueBody += '1. Review the vulnerabilities above\n';
            issueBody += '2. Update affected packages\n';
            issueBody += '3. Run `pnpm audit fix` to apply automatic fixes\n';
            issueBody += '4. Manually update packages that cannot be automatically fixed\n';
            
            // Check if similar issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security',
              state: 'open'
            });
            
            const hasSecurityIssue = existingIssues.data.some(issue => 
              issue.title.includes('Security vulnerabilities detected')
            );
            
            if (!hasSecurityIssue) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 Security vulnerabilities detected in dependencies',
                body: issueBody,
                labels: ['security', 'dependencies', 'high priority']
              });
            }

      - name: 📊 Security summary
        if: always()
        run: |
          echo "## 🔒 Security Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Vulnerabilities Found:** ${{ steps.audit.outputs.vulnerabilities }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.audit.outputs.vulnerabilities }}" != "0" ]; then
            echo "**Status:** ⚠️ Action Required" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ✅ No Issues Found" >> $GITHUB_STEP_SUMMARY
          fi